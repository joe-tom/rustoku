// The array that allows binary to ternary conversion
pub static mut BT: [u32; 65536] = [0; 65536];

// The arrays for move lookup
pub static mut MOVES: [[(u8,u8); 15]; 14348907] = [[(0,0); 15]; 14348907];

// The array for win lookup
pub static mut WON: [u8; 65536] = [0; 65536]; 

pub struct Board {
  pub multi: [[u8; 15]; 15],

  pub horiz_y: [u16; 21],
  pub horiz_o: [u16; 21],
  pub verti_y: [u16; 21],
  pub verti_o: [u16; 21],

  pub diagr_y: [u16; 21],
  pub diagr_o: [u16; 21],
  pub diagl_y: [u16; 21],
  pub diagl_o: [u16; 21]
}


pub const NIL: u8 = 240;
pub static HORIZ: [(usize, usize); 225] = [
  (00,14),(00,13),(00,12),(00,11),(00,10),(00,09),(00,08),(00,07),(00,06),(00,05),(00,04),(00,03),(00,02),(00,01),(00,00),
  (01,14),(01,13),(01,12),(01,11),(01,10),(01,09),(01,08),(01,07),(01,06),(01,05),(01,04),(01,03),(01,02),(01,01),(01,00),
  (02,14),(02,13),(02,12),(02,11),(02,10),(02,09),(02,08),(02,07),(02,06),(02,05),(02,04),(02,03),(02,02),(02,01),(02,00),
  (03,14),(03,13),(03,12),(03,11),(03,10),(03,09),(03,08),(03,07),(03,06),(03,05),(03,04),(03,03),(03,02),(03,01),(03,00),
  (04,14),(04,13),(04,12),(04,11),(04,10),(04,09),(04,08),(04,07),(04,06),(04,05),(04,04),(04,03),(04,02),(04,01),(04,00),
  (05,14),(05,13),(05,12),(05,11),(05,10),(05,09),(05,08),(05,07),(05,06),(05,05),(05,04),(05,03),(05,02),(05,01),(05,00),
  (06,14),(06,13),(06,12),(06,11),(06,10),(06,09),(06,08),(06,07),(06,06),(06,05),(06,04),(06,03),(06,02),(06,01),(06,00),
  (07,14),(07,13),(07,12),(07,11),(07,10),(07,09),(07,08),(07,07),(07,06),(07,05),(07,04),(07,03),(07,02),(07,01),(07,00),
  (08,14),(08,13),(08,12),(08,11),(08,10),(08,09),(08,08),(08,07),(08,06),(08,05),(08,04),(08,03),(08,02),(08,01),(08,00),
  (09,14),(09,13),(09,12),(09,11),(09,10),(09,09),(09,08),(09,07),(09,06),(09,05),(09,04),(09,03),(09,02),(09,01),(09,00),
  (10,14),(10,13),(10,12),(10,11),(10,10),(10,09),(10,08),(10,07),(10,06),(10,05),(10,04),(10,03),(10,02),(10,01),(10,00),
  (11,14),(11,13),(11,12),(11,11),(11,10),(11,09),(11,08),(11,07),(11,06),(11,05),(11,04),(11,03),(11,02),(11,01),(11,00),
  (12,14),(12,13),(12,12),(12,11),(12,10),(12,09),(12,08),(12,07),(12,06),(12,05),(12,04),(12,03),(12,02),(12,01),(12,00),
  (13,14),(13,13),(13,12),(13,11),(13,10),(13,09),(13,08),(13,07),(13,06),(13,05),(13,04),(13,03),(13,02),(13,01),(13,00),
  (14,14),(14,13),(14,12),(14,11),(14,10),(14,09),(14,08),(14,07),(14,06),(14,05),(14,04),(14,03),(14,02),(14,01),(14,00)
];

pub static VERTI: [(usize, usize); 225] = [
  (00,14),(01,14),(02,14),(03,14),(04,14),(05,14),(06,14),(07,14),(08,14),(09,14),(10,14),(11,14),(12,14),(13,14),(14,14),
  (00,13),(01,13),(02,13),(03,13),(04,13),(05,13),(06,13),(07,13),(08,13),(09,13),(10,13),(11,13),(12,13),(13,13),(14,13),
  (00,12),(01,12),(02,12),(03,12),(04,12),(05,12),(06,12),(07,12),(08,12),(09,12),(10,12),(11,12),(12,12),(13,12),(14,12),
  (00,11),(01,11),(02,11),(03,11),(04,11),(05,11),(06,11),(07,11),(08,11),(09,11),(10,11),(11,11),(12,11),(13,11),(14,11),
  (00,10),(01,10),(02,10),(03,10),(04,10),(05,10),(06,10),(07,10),(08,10),(09,10),(10,10),(11,10),(12,10),(13,10),(14,10),
  (00,09),(01,09),(02,09),(03,09),(04,09),(05,09),(06,09),(07,09),(08,09),(09,09),(10,09),(11,09),(12,09),(13,09),(14,09),
  (00,08),(01,08),(02,08),(03,08),(04,08),(05,08),(06,08),(07,08),(08,08),(09,08),(10,08),(11,08),(12,08),(13,08),(14,08),
  (00,07),(01,07),(02,07),(03,07),(04,07),(05,07),(06,07),(07,07),(08,07),(09,07),(10,07),(11,07),(12,07),(13,07),(14,07),
  (00,06),(01,06),(02,06),(03,06),(04,06),(05,06),(06,06),(07,06),(08,06),(09,06),(10,06),(11,06),(12,06),(13,06),(14,06),
  (00,05),(01,05),(02,05),(03,05),(04,05),(05,05),(06,05),(07,05),(08,05),(09,05),(10,05),(11,05),(12,05),(13,05),(14,05),
  (00,04),(01,04),(02,04),(03,04),(04,04),(05,04),(06,04),(07,04),(08,04),(09,04),(10,04),(11,04),(12,04),(13,04),(14,04),
  (00,03),(01,03),(02,03),(03,03),(04,03),(05,03),(06,03),(07,03),(08,03),(09,03),(10,03),(11,03),(12,03),(13,03),(14,03),
  (00,02),(01,02),(02,02),(03,02),(04,02),(05,02),(06,02),(07,02),(08,02),(09,02),(10,02),(11,02),(12,02),(13,02),(14,02),
  (00,01),(01,01),(02,01),(03,01),(04,01),(05,01),(06,01),(07,01),(08,01),(09,01),(10,01),(11,01),(12,01),(13,01),(14,01),
  (00,00),(01,00),(02,00),(03,00),(04,00),(05,00),(06,00),(07,00),(08,00),(09,00),(10,00),(11,00),(12,00),(13,00),(14,00),
];



const NO:usize = 15;
pub static HORIZ_ARRS:[[u8; 15]; 15] = [
  [000,001,002,003,004,005,006,007,008,009,010,011,012,013,014],
  [015,016,017,018,019,020,021,022,023,024,025,026,027,028,029],
  [030,031,032,033,034,035,036,037,038,039,040,041,042,043,044],
  [045,046,047,048,049,050,051,052,053,054,055,056,057,058,059],
  [060,061,062,063,064,065,066,067,068,069,070,071,072,073,074],
  [075,076,077,078,079,080,081,082,083,084,085,086,087,088,089],
  [090,091,092,093,094,095,096,097,098,099,100,101,102,103,104],
  [105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],
  [120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],
  [135,136,137,138,139,140,141,142,143,144,145,146,147,148,149],
  [150,151,152,153,154,155,156,157,158,159,160,161,162,163,164],
  [165,166,167,168,169,170,171,172,173,174,175,176,177,178,179],
  [180,181,182,183,184,185,186,187,188,189,190,191,192,193,194],
  [195,196,197,198,199,200,201,202,203,204,205,206,207,208,209],
  [210,211,212,213,214,215,216,217,218,219,220,221,222,223,224]
];

pub static VERTI_ARRS:[[u8; 15]; 15] = [
  [000,015,030,045,060,075,090,105,120,135,150,165,180,195,210],
  [001,016,031,046,061,076,091,106,121,136,151,166,181,196,211],
  [002,017,032,047,062,077,092,107,122,137,152,167,182,197,212],
  [003,018,033,048,063,078,093,108,123,138,153,168,183,198,213],
  [004,019,034,049,064,079,094,109,124,139,154,169,184,199,214],
  [005,020,035,050,065,080,095,110,125,140,155,170,185,200,215],
  [006,021,036,051,066,081,096,111,126,141,156,171,186,201,216],
  [007,022,037,052,067,082,097,112,127,142,157,172,187,202,217],
  [008,023,038,053,068,083,098,113,128,143,158,173,188,203,218],
  [009,024,039,054,069,084,099,114,129,144,159,174,189,204,219],
  [010,025,040,055,070,085,100,115,130,145,160,175,190,205,220],
  [011,026,041,056,071,086,101,116,131,146,161,176,191,206,221],
  [012,027,042,057,072,087,102,117,132,147,162,177,192,207,222],
  [013,028,043,058,073,088,103,118,133,148,163,178,193,208,223],
  [014,029,044,059,074,089,104,119,134,149,164,179,194,209,224]
];

pub static DIAGL: [(usize, usize); 225] = [
  (NO,NO),(NO,NO),(NO,NO),(NO,NO),(00,00),(01,00),(02,00),(03,00),(04,00),(05,00),(06,00),(07,00),(08,00),(09,00),(10,00),
  (NO,NO),(NO,NO),(NO,NO),(00,01),(01,01),(02,01),(03,01),(04,01),(05,01),(06,01),(07,01),(08,01),(09,01),(10,01),(11,00),
  (NO,NO),(NO,NO),(00,02),(01,02),(02,02),(03,02),(04,02),(05,02),(06,02),(07,02),(08,02),(09,02),(10,02),(11,01),(12,00),
  (NO,NO),(00,03),(01,03),(02,03),(03,03),(04,03),(05,03),(06,03),(07,03),(08,03),(09,03),(10,03),(11,02),(12,01),(13,00),
  (00,04),(01,04),(02,04),(03,04),(04,04),(05,04),(06,04),(07,04),(08,04),(09,04),(10,04),(11,03),(12,02),(13,01),(14,00),
  (01,05),(02,05),(03,05),(04,05),(05,05),(06,05),(07,05),(08,05),(09,05),(10,05),(11,04),(12,03),(13,02),(14,01),(15,00),
  (02,06),(03,06),(04,06),(05,06),(06,06),(07,06),(08,06),(09,06),(10,06),(11,05),(12,04),(13,03),(14,02),(15,01),(16,00),
  (03,07),(04,07),(05,07),(06,07),(07,07),(08,07),(09,07),(10,07),(11,06),(12,05),(13,04),(14,03),(15,02),(16,01),(17,00),
  (04,08),(05,08),(06,08),(07,08),(08,08),(09,08),(10,08),(11,07),(12,06),(13,05),(14,04),(15,03),(16,02),(17,01),(18,00),
  (05,09),(06,09),(07,09),(08,09),(09,09),(10,09),(11,08),(12,07),(13,06),(14,05),(15,04),(16,03),(17,02),(18,01),(19,00),
  (06,10),(07,10),(08,10),(09,10),(10,10),(11,09),(12,08),(13,07),(14,06),(15,05),(16,04),(17,03),(18,02),(19,01),(20,00),
  (07,11),(08,11),(09,11),(10,11),(11,10),(12,09),(13,08),(14,07),(15,06),(16,05),(17,04),(18,03),(19,02),(20,01),(NO,NO),
  (08,12),(09,12),(10,12),(11,11),(12,10),(13,09),(14,08),(15,07),(16,06),(17,05),(18,04),(19,03),(20,02),(NO,NO),(NO,NO),
  (09,13),(10,13),(11,12),(12,11),(13,10),(14,09),(15,08),(16,07),(17,06),(18,05),(19,04),(20,03),(NO,NO),(NO,NO),(NO,NO),
  (10,14),(11,13),(12,12),(13,11),(14,10),(15,09),(16,08),(17,07),(18,06),(19,05),(20,04),(NO,NO),(NO,NO),(NO,NO),(NO,NO)
];

pub static DIAGL_ARRS:[[u8; 15]; 21] = [
  [004,018,032,046,060,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [005,019,033,047,061,075,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [006,020,034,048,062,076,090,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [007,021,035,049,063,077,091,105,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [008,022,036,050,064,078,092,106,120,NIL,NIL,NIL,NIL,NIL,NIL],
  [009,023,037,051,065,079,093,107,121,135,NIL,NIL,NIL,NIL,NIL],
  [010,024,038,052,066,080,094,108,122,136,150,NIL,NIL,NIL,NIL],
  [011,025,039,053,067,081,095,109,123,137,151,165,NIL,NIL,NIL],
  [012,026,040,054,068,082,096,110,124,138,152,166,180,NIL,NIL],
  [013,027,041,055,069,083,097,111,125,139,153,167,181,195,NIL],
  [014,028,042,056,070,084,098,112,126,140,154,168,182,196,210],
  [029,043,057,071,085,099,113,127,141,155,169,183,197,211,NIL],
  [044,058,072,086,100,114,128,142,156,170,184,198,212,NIL,NIL],
  [059,073,087,101,115,129,143,157,171,185,199,213,NIL,NIL,NIL],
  [074,088,102,116,130,144,158,172,186,200,214,NIL,NIL,NIL,NIL],
  [089,103,117,131,145,159,173,187,201,215,NIL,NIL,NIL,NIL,NIL],
  [104,118,132,146,160,174,188,202,216,NIL,NIL,NIL,NIL,NIL,NIL],
  [119,133,147,161,175,189,203,217,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [134,148,162,176,190,204,218,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [149,163,177,191,205,219,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [164,178,192,206,220,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
];

pub static DIAGR_ARRS:[[u8; 15]; 21] = [
  [010,026,042,058,074,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [009,025,041,057,073,089,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [008,024,040,056,072,088,104,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [007,023,039,055,071,087,103,119,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [006,022,038,054,070,086,102,118,134,NIL,NIL,NIL,NIL,NIL,NIL],
  [005,021,037,053,069,085,101,117,133,149,NIL,NIL,NIL,NIL,NIL],
  [004,020,036,052,068,084,100,116,132,148,164,NIL,NIL,NIL,NIL],
  [003,019,035,051,067,083,099,115,131,147,163,179,NIL,NIL,NIL],
  [002,018,034,050,066,082,098,114,130,146,162,178,194,NIL,NIL],
  [001,017,033,049,065,081,097,113,129,145,161,177,193,209,NIL],
  [000,016,032,048,064,080,096,112,128,144,160,176,192,208,224],
  [015,031,047,063,079,095,111,127,143,159,175,191,207,223,NIL],
  [030,046,062,078,094,110,126,142,158,174,190,206,222,NIL,NIL],
  [045,061,077,093,109,125,141,157,173,189,205,221,NIL,NIL,NIL],
  [060,076,092,108,124,140,156,172,188,204,220,NIL,NIL,NIL,NIL],
  [075,091,107,123,139,155,171,187,203,219,NIL,NIL,NIL,NIL,NIL],
  [090,106,122,138,154,170,186,202,218,NIL,NIL,NIL,NIL,NIL,NIL],
  [105,121,137,153,169,185,201,217,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [120,136,152,168,184,200,216,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [135,151,167,183,199,215,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL],
  [150,166,182,198,214,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL,NIL]
];

impl Board {
  pub fn won (&self, you: bool) -> bool {
    unsafe {
      if you {
        for i in 0..15usize {
          if WON[self.verti_y[i] as usize] != 0 || WON[self.horiz_y[i] as usize] != 0 {
            return true;
          }
        }
      } else {
        for i in 0..15usize {
          if WON[self.verti_o[i] as usize] != 0 || WON[self.horiz_o[i] as usize] != 0 {
            return true;
          }
        }
      }
    }
    return false;
  }
  pub fn gen_moves (&self) -> Vec<(u8,u8)> {
    let mut movs:Vec<(u8,u8)> = vec![];
    unsafe {
      let mut i = 0usize;
      loop {
        if i >= 21{
          break;
        }

        
        let mut h_done = true;
        let mut v_done = true;
        let mut l_done = true;

        let mut v_state = MOVES[((2 * BT[self.verti_o[i] as usize]) + BT[self.verti_y[i] as usize]) as usize].iter();
        let mut h_state = MOVES[((2 * BT[self.horiz_o[i] as usize]) + BT[self.horiz_y[i] as usize]) as usize].iter();
        let mut l_state = MOVES[((2 * BT[self.diagl_o[i] as usize]) + BT[self.diagl_y[i] as usize]) as usize].iter();
        if i < 15{

          loop {
            if v_done {
              match v_state.next() {
                Some(mov) => {
                  if mov.1 == 0 {
                    if !h_done && !l_done {break;} v_done = false;
                  } else {
                    movs.push((VERTI_ARRS[i][14usize - mov.0 as usize], mov.1));
                  }
                }
                None => {
                  if !h_done && !l_done { break;} v_done = false;
                }
              }
            }
            if h_done {
              match h_state.next() {
                Some(mov) => {
                  if mov.1 == 0 {
                    if !v_done && !l_done {break;} h_done = false;
                  } else {
                    movs.push((HORIZ_ARRS[i][14usize - mov.0 as usize], mov.1));
                  }
                },
                None => {
                  if !v_done && !l_done {break;} h_done = false;
                },
              }
            }
            if l_done {
              match l_state.next() {
                Some(mov) => {
                  if mov.1 == 0 {
                    if !v_done && !h_done {break;} l_done = false;
                  } else {
                    let a = DIAGL_ARRS[i][mov.0 as usize];
                    if a != NIL {
                      movs.push((a, mov.1));
                    }
                  }
                },
                None => {
                  if !v_done && !h_done {break;} l_done = false;
                },
              }
            }
          }
          println!("YO");
        } else {
          println!("HERE");
          match l_state.next() {
            Some(mov) => {
              if mov.1 == 0 {
                break;
              } else {
                let a = DIAGL_ARRS[i][mov.0 as usize];
                if a != NIL {
                  movs.push((a, mov.1));
                }
              }
            },
            None => {
              break;
            },
          }
        }

        i += 1;
      }/*
        let v_movs: Vec<(u8,u8)> = v_state as usize].iter().filter(|el| el.1 != 0).map(|el| (VERTI_ARRS[i][14usize - el.0 as usize],el.1)).collect();
        movs.extend(&v_movs);
        let h_movs: Vec<(u8,u8)> = MOVES[h_state as usize].iter().filter(|el| el.1 != 0).map(|el| (HORIZ_ARRS[i][14usize - el.0 as usize],el.1)).collect();
        movs.extend(&h_movs);
*/  }

    let mut real_movs: Vec<(u8, u8)> = vec![];
    let mut first = false;
    let mut cur_mov = (15,15);
    movs.sort_by(|a,b| (a.0).cmp(&b.0));
    println!("{:?}", movs.len());
    for mov in &movs {
      if mov.0 == NIL {
        continue;
      }

      if mov.0 == cur_mov.0 {
        cur_mov.1 += mov.1
      } else {
        if first {
          real_movs.push(cur_mov);
          cur_mov = *mov;
        }else {
          first = true;
          cur_mov = *mov;
        }
      }
    }
    if first{
      real_movs.push(cur_mov)
    }
    return real_movs;
  }

  pub fn place_piece (&mut self, place: usize, you: bool) {
    unsafe {
      if you {
        self.place_horiz_you(place);
        self.place_verti_you(place);
        self.place_diagl_you(place);
      } else {
        self.place_horiz_opp(place);
        self.place_verti_opp(place);
        self.place_diagl_opp(place);
      }
    }
  }

  pub fn remove_piece (&mut self, place: usize, you: bool) {
    unsafe {
      if you {
        self.remove_horiz_you(place);
        self.remove_verti_you(place);
        self.remove_diagl_you(place);
      } else {
        self.remove_horiz_opp(place);
        self.remove_verti_opp(place);
        self.remove_diagl_opp(place);
      }
    }
  }

  pub unsafe fn place_horiz_you (&mut self, place: usize) {let mov = HORIZ[place]; self.horiz_y[mov.0] |= (1 << mov.1);}
  pub unsafe fn place_verti_you (&mut self, place: usize) {let mov = VERTI[place]; self.verti_y[mov.0] |= (1 << mov.1);}
  pub unsafe fn place_horiz_opp (&mut self, place: usize) {let mov = HORIZ[place]; self.horiz_o[mov.0] |= (1 << mov.1);}
  pub unsafe fn place_verti_opp (&mut self, place: usize) {let mov = VERTI[place]; self.verti_o[mov.0] |= (1 << mov.1);}

  pub unsafe fn remove_horiz_you (&mut self, place: usize) {let mov = HORIZ[place]; self.horiz_y[mov.0] ^= (1 << mov.1);}
  pub unsafe fn remove_verti_you (&mut self, place: usize) {let mov = VERTI[place]; self.verti_y[mov.0] ^= (1 << mov.1);}
  pub unsafe fn remove_horiz_opp (&mut self, place: usize) {let mov = HORIZ[place]; self.horiz_o[mov.0] ^= (1 << mov.1);}
  pub unsafe fn remove_verti_opp (&mut self, place: usize) {let mov = VERTI[place]; self.verti_o[mov.0] ^= (1 << mov.1);}

  pub unsafe fn place_diagl_you (&mut self, place: usize) {let mov = DIAGL[place]; if mov.0 == NO {return;}self.diagl_y[mov.0] |= (1 << mov.1);}
  pub unsafe fn place_diagl_opp (&mut self, place: usize) {let mov = DIAGL[place]; if mov.0 == NO {return;}self.diagl_o[mov.0] |= (1 << mov.1);}

  pub unsafe fn remove_diagl_you (&mut self, place: usize) {let mov = DIAGL[place]; if mov.0 == NO {return;}self.diagl_y[mov.0] ^= (1 << mov.1);}
  pub unsafe fn remove_diagl_opp (&mut self, place: usize) {let mov = DIAGL[place]; if mov.0 == NO {return;}self.diagl_o[mov.0] ^= (1 << mov.1);}
}

